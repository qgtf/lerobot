# @package _global_

seed: 100000
dataset_repo_id: lerobot/pusht_keypoints


training:
  offline_steps: 200000
  online_steps: 0
  eval_freq: 5000
  save_freq: 5000
  log_freq: 250
  save_checkpoint: true

  batch_size: 64
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  grad_clip_norm: 10
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.environment_state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.action_chunk_size})]"

  drop_n_last_frames: 7

eval:
  n_episodes: 50
  batch_size: 50

# See `configuration_act.py` for more details.
policy:
  name: hpt
  domain_name: "pusht_keypoints"
  head_architecture: "diffusion"

  # Input / output structure.
  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.environment_state: [16]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.environment_state: min_max
    observation.state: min_max
  output_normalization_modes:
    action: min_max

  # HPT trunk config
  embed_dim: 256
  num_blocks: 16
  num_heads: 8
  use_modality_embedding: True
  use_domain_embedding: False
  token_postprocessing: "mean"
  weight_init_style: 'pytorch'
  drop_path: 0.0
  no_trunk: False
  load_pretrained: "" # load pre-trained model
  freeze_trunk: False

  # stem network (projectors) for different modalities
  modalities: ['state']
  modality_embed_dim: "${policy.embed_dim}"
  normalize_state: True # normalize state vectors
  state_embedding_dim: 1
  image_encoder: resnet
  crossattn_dim_head: 64
  crossattn_heads: 8
  crossattn_modality_dropout: 0.1
  n_obs_steps: 2
  random_horizon_masking: False # whether to randomize observation input length
  add_pos_embedding_to_state: False

  state_crossattn_latent: 32
  state_input_dim: 18 # ovewrite based on the dataset 16 + 2
  state_output_dim: "${policy.embed_dim}"
  state_widths: [128, 256]
  state_num_of_copy: 1

  # head
  action_chunk_size: 16
  n_action_steps: 8

  # Diffusion Head
  down_dims: [256, 512, 1024]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDIM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: 10  # if not provided, defaults to `num_train_timesteps`

  # Loss computation
  do_mask_loss_for_padding: false
